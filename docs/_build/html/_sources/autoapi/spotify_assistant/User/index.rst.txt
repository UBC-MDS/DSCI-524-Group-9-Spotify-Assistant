:py:mod:`spotify_assistant.User`
================================

.. py:module:: spotify_assistant.User


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spotify_assistant.User.User




.. py:class:: User(client_credentials)

   .. py:method:: get_map()
      :classmethod:

      Gets continent to country map


      :returns: A hashmap
      :rtype: Dict


   .. py:method:: __get_releases(continent: str, limit: int = 5)

      Gets the top new releases

      :param continent: The continent where the new releases were published
      :type continent: str
      :param limit: Number of new releases to return
      :type limit: int

      :returns: A list of dictionaries. Each dictionary contains metadata of 1 new release.
      :rtype: List


   .. py:method:: extract_albums(all_releases)
      :classmethod:

      Extracts the album names and the corresponding artists

      :param all_releases: A list of dictionaries. Each dictionary contains metadata for 1 new release.
      :type all_releases: list

      :returns: A list of dictionaries. Each dictionary contains metadata for 1 new release.
      :rtype: List


   .. py:method:: get_new_releases_by_continent(continent: str, limit: int = 5)

      Gets the new releases by continent

      Usually the style of music from the same continent are similar,
      and this helps users find and explore songs similar to their taste.

      :param continent: continent name (i.e. Asia, Europe, Oceania, Americas, Africa)
      :type continent: str

      :returns: A list of titles of new releases in String from the corresponding continent
      :rtype: List

      .. rubric:: Examples

      >>> User.get_new_releases_by_continent("Asia")


   .. py:method:: __get_saved_track()

      Returns the user's saved tracks

      :returns: A list of dictionaries. Each dictionary contains metadata of 1 track.
      :rtype: List


   .. py:method:: __get_artists(artists)

      Returns the metadata of a list of artists

      :param artists: list of artist IDs (strings)
      :type artists: list

      :returns: A list of dictionaries. Each dictionary contains metadata of 1 artist.
      :rtype: List


   .. py:method:: get_top_genres(artist_information)
      :classmethod:

      Returns the most commonly occuring genres among different artists

      :param artist_information: list of dictionaries containing artist metadata
      :type artist_information: list

      :returns: A list of most common genres
      :rtype: List


   .. py:method:: get_users_top_genres()

      Finds the top 5 genres from a user's saved tracks

      :returns: A list of the top 5 genres that a user likes
      :rtype: List

      .. rubric:: Examples

      >>> credentials = {}
      >>> RandomUser = User(credentials)
      >>> RandomUser.get_users_top_genres()


   .. py:method:: __get_all_playlists()

      Calls the spotify api and returns the current user's saved/owned playlists

      :returns: A list of spotify responses containing information about a user's playlists
      :rtype: list


   .. py:method:: filter_playlists(playlist_response, playlists=None)
      :classmethod:

      Filters a spotify playlist response for specified playlists

      :param playlist_response: list of spotify responses containing information about playlists
      :type playlist_response: list
      :param playlists: list of playlist names (strings) to get songs from, defaults to all
      :type playlists: list

      :returns: A dictionary with the names of playlists as keys,
                and the playlist id as the value
      :rtype: dict


   .. py:method:: __get_one_playlists_songs(playlist_id)

      Calls the spotify api and returns the all the songs in a playlist

      :returns: A list of spotify responses containing all the songs in a playlist
      :rtype: list


   .. py:method:: format_songs(song_response)
      :classmethod:

      Formats a spotify response into just song names

      :param playlist_response: list of spotify responses containing information about playlists
      :type playlist_response: list
      :param playlists: list of playlist names (strings) to get songs from, defaults to all
      :type playlists: list

      :returns: A dictionary with the names of playlists as keys,
                and the playlist id as the value
      :rtype: dict


   .. py:method:: get_users_playlists_songs(playlists=None)

      Gets all of the song titles within a user's owned and followed playlists

      Playlists from which to retrieve songs can be specified by name as a list,
      but by default all songs from all of a user's owned and followed playlists will be retrieved.
      Due to access restrictions, non-collaborative, private playlists cannot be retrieved.

      :param playlists: list of playlist names (strings) to get songs from, defaults to all
      :type playlists: list

      :returns: A dictionary with the names of playlists as keys,
                and a list of song titles contained in the playlist as values
      :rtype: dict

      .. rubric:: Examples

      >>> credentials = {}
      >>> Caroline = User(credentials)
      >>> Caroline.get_playlists_songs()


   .. py:method:: __get_top_artists()

      Returns the current user's top artists from Spotify.

      :returns: A list of artist information.
      :rtype: list


   .. py:method:: extract_artist_id(artists)
      :classmethod:

      Extracts Returns the current user's top artists from Spotify.

      :param artists: A list of artist information (name, ID, etc.).
      :type artists: list

      :returns: A list of artist id's.
      :rtype: list


   .. py:method:: __get_genre_seeds()

      Returns 5 genre seeds from Spotify.

      :returns: A list of genre seeds.
      :rtype: list


   .. py:method:: get_recommended_songs(seed_type, seeds, num_songs=10)

      Returns a specified number of recommended songs from Spotify.

      :param seed_type: Either 'artists' or 'genres'. Default is 'artists'.
      :type seed_type: str
      :param seeds: A list of artist or track ID's.
      :type seeds: list
      :param num_songs: The number of recommended songs to return.
                        Must be between 1 and 100 (inclusive).
      :type num_songs: int

      :returns: A list of track uri's for identifying specific tracks.
      :rtype: list


   .. py:method:: __create_playlist(playlist_name)

      Creates a new, empty playlist for the user on Spotify.

      :param playlist_name: The name of the new playlist.
      :type playlist_name: str

      :returns: A tuple containing the url and playlist id for the new playlist.
      :rtype: (str, str)


   .. py:method:: __add_songs_to_playlist(playlist_id, new_songs)

      Adds songs to a specified user playlist on Spotify.

      :param playlist_id: The id of the new playlist.
      :type playlist_id: str
      :param new_songs: List of track ID's corresponding to songs to add to the playlist.
      :type new_songs: list


   .. py:method:: get_song_recommendations(playlist_name=None, num_songs=10)

      Creates a playlist containing recommended songs based on the user's top 3 artists.
      If there are not yet any top artists for the user's account,
      use genres instead.

      Prints a url link to the new playlist on Spotify.

      :param playlist_name: The name of the newly created playlist. Defaults to 'Recommended Songs'
                            with the current date (i.e. "2023-01-14 Recommended Songs").
      :type playlist_name: str
      :param num_songs: The number of songs to recommend. Must be between 1 and 100 (inclusive).
      :type num_songs: int

      .. rubric:: Examples

      >>> credentials = {}
      >>> RandomUser = User(credentials)
      >>> RandomUser.get_song_recommendations("Recommended Songs")



